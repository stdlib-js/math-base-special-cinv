{"version":3,"file":"index.mjs","sources":["../lib/cinv.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar FLOAT64_BIGGEST = require( '@stdlib/constants-float64-max' );\nvar FLOAT64_SMALLEST = require( '@stdlib/constants-float64-smallest-normal' );\nvar EPS = require( '@stdlib/constants-float64-eps' );\n\n\n// VARIABLES //\n\nvar LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;\nvar SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );\nvar RECIP_EPS_SQR = 2.0 / ( EPS * EPS );\n\n\n// MAIN //\n\n/**\n* Computes the inverse of a complex number.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} re - real component\n* @param {number} im - imaginary component\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var out = new Array( 2 );\n*\n* var v = cinv( out, 2.0, 4.0 );\n* // returns [ 0.1, -0.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction cinv( out, re, im ) {\n\tvar ab;\n\tvar s;\n\tvar r;\n\tvar t;\n\n\tab = max( abs(re), abs(im) );\n\ts = 1.0;\n\tif ( ab >= LARGE_THRESHOLD ) {\n\t\tre *= 0.5;\n\t\tim *= 0.5;\n\t\ts *= 0.5;\n\t} else if ( ab <= SMALL_THRESHOLD ) {\n\t\tre *= RECIP_EPS_SQR;\n\t\tim *= RECIP_EPS_SQR;\n\t\ts *= RECIP_EPS_SQR;\n\t}\n\tif ( abs( im ) <= abs( re ) ) {\n\t\tr = im / re;\n\t\tt = 1.0 / ( re + (im*r) );\n\t\tout[ 0 ] = t;\n\t\tout[ 1 ] = -r * t;\n\t} else {\n\t\tr = re / im;\n\t\tt = 1.0 / ( im + (re*r) );\n\t\tout[ 0 ] = r * t;\n\t\tout[ 1 ] = -t;\n\t}\n\tout[ 0 ] *= s;\n\tout[ 1 ] *= s;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar inverse = require( './cinv.js' );\n\n\n// MAIN //\n\n/**\n* Computes the inverse of a complex number.\n*\n* ## References\n*\n* -   Baudin, Michael, and Robert L. Smith. 2012. \"A Robust Complex Division in Scilab.\" _arXiv_ abs/1210.4539 \\[cs.MS\\] (October): 1â€“25. <https://arxiv.org/abs/1210.4539>.\n*\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} re - real component\n* @param {number} im - imaginary component\n* @returns {(Array|TypedArray|Object)} output array\n*\n* @example\n* var v = cinv( 2.0, 4.0 );\n* // returns [ 0.1, -0.2 ]\n*\n* @example\n* var out = new Array( 2 );\n*\n* var v = cinv( out, 2.0, 4.0 );\n* // returns [ 0.1, -0.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\nfunction cinv( out, re, im ) {\n\tif ( arguments.length === 2 ) {\n\t\treturn inverse( [ 0.0, 0.0 ], out, re );\n\t}\n\treturn inverse( out, re, im );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cinv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the inverse of a complex number.\n*\n* @module @stdlib/math-base-special-cinv\n*\n* @example\n* var cinv = require( '@stdlib/math-base-special-cinv' );\n*\n* var v = cinv( 2.0, 4.0 );\n* // returns [ 0.1, -0.2 ]\n*\n* @example\n* var cinv = require( '@stdlib/math-base-special-cinv' );\n*\n* var out = new Array( 2 );\n*\n* var v = cinv( out, 2.0, 4.0 );\n* // returns [ 0.1, -0.2 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nvar cinv = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = cinv;\n"],"names":["abs","require$$0","max","require$$1","LARGE_THRESHOLD","require$$2","SMALL_THRESHOLD","require$$3","require$$4","RECIP_EPS_SQR","inverse","out","re","im","ab","s","r","t","lib","arguments","length"],"mappings":";;ycAsBA,IAAIA,EAAMC,EACNC,EAAMC,EAQNC,EAAoC,GAPlBC,EAQlBC,EAPmBC,GAOoB,EANjCC,GAONC,EAAgB,GAPVD,EAAAA,GAkEV,ICtEIE,EDkCJ,SAAeC,EAAKC,EAAIC,GACvB,IAAIC,EACAC,EACAC,EACAC,EA0BJ,OAvBAF,EAAI,GADJD,EAAKZ,EAAKF,EAAIY,GAAKZ,EAAIa,MAEZT,GACVQ,GAAM,GACNC,GAAM,GACNE,GAAK,IACMD,GAAMR,IACjBM,GAAMH,EACNI,GAAMJ,EACNM,GAAKN,GAEDT,EAAKa,IAAQb,EAAKY,IAEtBK,EAAI,GAAQL,EAAMC,GADlBG,EAAIH,EAAKD,IAETD,EAAK,GAAMM,EACXN,EAAK,IAAOK,EAAIC,IAGhBA,EAAI,GAAQJ,EAAMD,GADlBI,EAAIJ,EAAKC,IAETF,EAAK,GAAMK,EAAIC,EACfN,EAAK,IAAOM,GAEbN,EAAK,IAAOI,EACZJ,EAAK,IAAOI,EACLJ,GCvBR,ICbAO,EDGA,SAAeP,EAAKC,EAAIC,GACvB,OAA0B,IAArBM,UAAUC,OACPV,EAAS,CAAE,EAAK,GAAOC,EAAKC,GAE7BF,EAASC,EAAKC,EAAIC"}