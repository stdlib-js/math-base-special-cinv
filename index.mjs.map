{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport max from '@stdlib/math-base-special-max';\nimport FLOAT64_BIGGEST from '@stdlib/constants-float64-max';\nimport FLOAT64_SMALLEST from '@stdlib/constants-float64-smallest-normal';\nimport EPS from '@stdlib/constants-float64-eps';\nimport Complex128 from '@stdlib/complex-float64-ctor';\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\n\n\n// VARIABLES //\n\nvar LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;\nvar SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );\nvar RECIP_EPS_SQR = 2.0 / ( EPS * EPS );\n\n\n// MAIN //\n\n/**\n* Computes the inverse of a double-precision complex floating-point number.\n*\n* ## References\n*\n* -   Baudin, Michael, and Robert L. Smith. 2012. \"A Robust Complex Division in Scilab.\" _arXiv_ abs/1210.4539 \\[cs.MS\\] (October): 1â€“25. <https://arxiv.org/abs/1210.4539>.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var v = cinv( new Complex128( 2.0, 4.0 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 0.1\n*\n* var im = imag( v );\n* // returns -0.2\n*/\nfunction cinv( z ) {\n\tvar ab;\n\tvar re;\n\tvar im;\n\tvar s;\n\tvar r;\n\tvar t;\n\n\tre = real( z );\n\tim = imag( z );\n\tab = max( abs(re), abs(im) );\n\ts = 1.0;\n\tif ( ab >= LARGE_THRESHOLD ) {\n\t\tre *= 0.5;\n\t\tim *= 0.5;\n\t\ts *= 0.5;\n\t} else if ( ab <= SMALL_THRESHOLD ) {\n\t\tre *= RECIP_EPS_SQR;\n\t\tim *= RECIP_EPS_SQR;\n\t\ts *= RECIP_EPS_SQR;\n\t}\n\tif ( abs( im ) <= abs( re ) ) {\n\t\tr = im / re;\n\t\tt = 1.0 / ( re + (im*r) );\n\t\tre = t;\n\t\tim = -r * t;\n\t} else {\n\t\tr = re / im;\n\t\tt = 1.0 / ( im + (re*r) );\n\t\tre = r * t;\n\t\tim = -t;\n\t}\n\tre *= s;\n\tim *= s;\n\treturn new Complex128( re, im );\n}\n\n\n// EXPORTS //\n\nexport default cinv;\n"],"names":["LARGE_THRESHOLD","FLOAT64_BIGGEST","SMALL_THRESHOLD","FLOAT64_SMALLEST","EPS","RECIP_EPS_SQR","cinv","z","ab","re","im","s","r","t","real","imag","max","abs","Complex128"],"mappings":";;yvBAkCA,IAAIA,EAAoC,GAAlBC,EAClBC,EAAkBC,GAAqB,EAAMC,GAC7CC,EAAgB,GAAQD,EAAMA,GA6BlC,SAASE,EAAMC,GACd,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EA4BJ,OA1BAJ,EAAKK,EAAMP,GACXG,EAAKK,EAAMR,GAEXI,EAAI,GADJH,EAAKQ,EAAKC,EAAIR,GAAKQ,EAAIP,MAEZV,GACVS,GAAM,GACNC,GAAM,GACNC,GAAK,IACMH,GAAMN,IACjBO,GAAMJ,EACNK,GAAML,EACNM,GAAKN,GAEDY,EAAKP,IAAQO,EAAKR,IAGtBA,EADAI,EAAI,GAAQJ,EAAMC,GADlBE,EAAIF,EAAKD,IAGTC,GAAME,EAAIC,IAIVJ,GAFAG,EAAIH,EAAKC,IACTG,EAAI,GAAQH,EAAMD,EAAGG,IAErBF,GAAMG,GAIA,IAAIK,EAFXT,GAAME,EACND,GAAMC,EAEP"}