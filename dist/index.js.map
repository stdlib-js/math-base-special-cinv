{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar FLOAT64_BIGGEST = require( '@stdlib/constants-float64-max' );\nvar FLOAT64_SMALLEST = require( '@stdlib/constants-float64-smallest-normal' );\nvar EPS = require( '@stdlib/constants-float64-eps' );\nvar Complex128 = require( '@stdlib/complex-float64' );\nvar real = require( '@stdlib/complex-real' );\nvar imag = require( '@stdlib/complex-imag' );\n\n\n// VARIABLES //\n\nvar LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;\nvar SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );\nvar RECIP_EPS_SQR = 2.0 / ( EPS * EPS );\n\n\n// MAIN //\n\n/**\n* Computes the inverse of a double-precision complex floating-point number.\n*\n* ## References\n*\n* -   Baudin, Michael, and Robert L. Smith. 2012. \"A Robust Complex Division in Scilab.\" _arXiv_ abs/1210.4539 \\[cs.MS\\] (October): 1\u201325. <https://arxiv.org/abs/1210.4539>.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64' );\n* var real = require( '@stdlib/complex-real' );\n* var imag = require( '@stdlib/complex-imag' );\n*\n* var v = cinv( new Complex128( 2.0, 4.0 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 0.1\n*\n* var im = imag( v );\n* // returns -0.2\n*/\nfunction cinv( z ) {\n\tvar ab;\n\tvar re;\n\tvar im;\n\tvar s;\n\tvar r;\n\tvar t;\n\n\tre = real( z );\n\tim = imag( z );\n\tab = max( abs(re), abs(im) );\n\ts = 1.0;\n\tif ( ab >= LARGE_THRESHOLD ) {\n\t\tre *= 0.5;\n\t\tim *= 0.5;\n\t\ts *= 0.5;\n\t} else if ( ab <= SMALL_THRESHOLD ) {\n\t\tre *= RECIP_EPS_SQR;\n\t\tim *= RECIP_EPS_SQR;\n\t\ts *= RECIP_EPS_SQR;\n\t}\n\tif ( abs( im ) <= abs( re ) ) {\n\t\tr = im / re;\n\t\tt = 1.0 / ( re + (im*r) );\n\t\tre = t;\n\t\tim = -r * t;\n\t} else {\n\t\tr = re / im;\n\t\tt = 1.0 / ( im + (re*r) );\n\t\tre = r * t;\n\t\tim = -t;\n\t}\n\tre *= s;\n\tim *= s;\n\treturn new Complex128( re, im);\n}\n\n\n// EXPORTS //\n\nmodule.exports = cinv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the inverse of a double-precision complex floating-point number.\n*\n* @module @stdlib/math-base-special-cinv\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64' );\n* var real = require( '@stdlib/complex-real' );\n* var imag = require( '@stdlib/complex-imag' );\n* var cinv = require( '@stdlib/math-base-special-cinv' );\n*\n* var v = cinv( new Complex128( 2.0, 4.0 ) );\n* // returns <Complex128>\n*\n* var re = real( v );\n* // returns 0.1\n*\n* var im = imag( v );\n* // returns -0.2\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAM,QAAS,+BAAgC,EAC/CC,EAAM,QAAS,+BAAgC,EAC/CC,EAAkB,QAAS,+BAAgC,EAC3DC,EAAmB,QAAS,2CAA4C,EACxEC,EAAM,QAAS,+BAAgC,EAC/CC,EAAa,QAAS,yBAA0B,EAChDC,EAAO,QAAS,sBAAuB,EACvCC,EAAO,QAAS,sBAAuB,EAKvCC,EAAkBN,EAAkB,GACpCO,EAAkBN,GAAqB,EAAMC,GAC7CM,EAAgB,GAAQN,EAAMA,GA6BlC,SAASO,EAAMC,EAAI,CAClB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,OAAAJ,EAAKR,EAAMM,CAAE,EACbG,EAAKR,EAAMK,CAAE,EACbC,EAAKZ,EAAKD,EAAIc,CAAE,EAAGd,EAAIe,CAAE,CAAE,EAC3BC,EAAI,EACCH,GAAML,GACVM,GAAM,GACNC,GAAM,GACNC,GAAK,IACMH,GAAMJ,IACjBK,GAAMJ,EACNK,GAAML,EACNM,GAAKN,GAEDV,EAAKe,CAAG,GAAKf,EAAKc,CAAG,GACzBG,EAAIF,EAAKD,EACTI,EAAI,GAAQJ,EAAMC,EAAGE,GACrBH,EAAKI,EACLH,EAAK,CAACE,EAAIC,IAEVD,EAAIH,EAAKC,EACTG,EAAI,GAAQH,EAAMD,EAAGG,GACrBH,EAAKG,EAAIC,EACTH,EAAK,CAACG,GAEPJ,GAAME,EACND,GAAMC,EACC,IAAIX,EAAYS,EAAIC,CAAE,CAC9B,CAKAhB,EAAO,QAAUY,IC9DjB,IAAIQ,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "abs", "max", "FLOAT64_BIGGEST", "FLOAT64_SMALLEST", "EPS", "Complex128", "real", "imag", "LARGE_THRESHOLD", "SMALL_THRESHOLD", "RECIP_EPS_SQR", "cinv", "z", "ab", "re", "im", "s", "r", "t", "main"]
}
